# import a sequence, show kmer composition
from afkost import Sequence
sequence_fus = "MASNDYTQQATQSYGAYPTQPGQGYSQQSSQPYGQQSYSGYSQSTDTSGYGQSSYSSYGQSQNTGYGTQSTPQGYGSTGGYGSSQSSQSSYGQQSSYPGYGQQPAPSSTSGSYGSSSQSSSYGQPQSGSYSQQPSYGGQQQSYGQQQSYNPPQGYGQQNQYNSSSGGGGGGGGGGNYGQDQSSMSSGGGSGGGYGNQDQSGGGGSGGYGQQDRGGRGRGGSGGGGGGGGGGYNRSSGGYEPRGRGGGRGGRGGMGGSDRGGFNKFGGPRDQGSRHDSEQDNSDNNTIFVQGLGENVTIESVADYFKQIGIIKTNKKTGQPMINLYTDRETGKLKGEATVSFDDPPSAKAAIDWFDGKEFSGNPIKVSFATRRADFNRGGGNGRGGRGRGGPMGRGGYGGGGSGGGGRGGFPSGGGGGGGQQRAGDWKCPNPTCENMNFSWRNECNQCKAPKPDGPGGGPGGSHMGGNYGDDRRGGRGGYDRGGYRGRGGDRGGFRGGRGGGDRGGFGPGKMDSRGEHRQDRRERPY"
sequence_thr = Sequence(sequence_fus, entropy_threshold=2.5)
print(sequence_thr) # human-readable print
sequence_nothr = Sequence(sequence_fus)
print(sequence_nothr)
sequence_nothr.plot(save_path="") # plot k=1, k=2 kmer, all kgap composition

# kmer composition stats
from afkost import Sequence
sequence_fus = "MASNDYTQQATQSYGAYPTQPGQGYSQQSSQPYGQQSYSGYSQSTDTSGYGQSSYSSYGQSQNTGYGTQSTPQGYGSTGGYGSSQSSQSSYGQQSSYPGYGQQPAPSSTSGSYGSSSQSSSYGQPQSGSYSQQPSYGGQQQSYGQQQSYNPPQGYGQQNQYNSSSGGGGGGGGGGNYGQDQSSMSSGGGSGGGYGNQDQSGGGGSGGYGQQDRGGRGRGGSGGGGGGGGGGYNRSSGGYEPRGRGGGRGGRGGMGGSDRGGFNKFGGPRDQGSRHDSEQDNSDNNTIFVQGLGENVTIESVADYFKQIGIIKTNKKTGQPMINLYTDRETGKLKGEATVSFDDPPSAKAAIDWFDGKEFSGNPIKVSFATRRADFNRGGGNGRGGRGRGGPMGRGGYGGGGSGGGGRGGFPSGGGGGGGQQRAGDWKCPNPTCENMNFSWRNECNQCKAPKPDGPGGGPGGSHMGGNYGDDRRGGRGGYDRGGYRGRGGDRGGFRGGRGGGDRGGFGPGKMDSRGEHRQDRRERPY"
sequence_esb = "MTTELNSFRVRKSEGVEGEEEDPALTELVFKKLRQTFLCPICHRPLQENPTALDVCGHVFCHSCIVNAIEKSCPSVKDPWEEDERQLTENSHGDQWSSPQKRNSRGRGNINDVRTSPVAKSGRGRSTKRLRLGQSCPICSVPAQISDLISVSLVSNLVSDIMKHPLLSAALVSPKSNDDNDLVKAGHIEEEEALAPSAEVSQVLSTLSGVSLTGNAGVQTVTLQSNNAPPVAEEATGEPEKKSEHGTHRQAIGSLPYSPSATPMGTSPLSVTSHVSVNTTNPHSTVTLSDHNFPVSVRSRSGSPEVVGGVHQTMPEPHGRSKTRGVGCSSPSEVCRPLTSNGDAENSDVLRNFEELSSSCSESGSSQDLQRHSEPCHRTNAVGSGTAGGDALTAVATAVPTSVQSSASTRHFSQKPQEDVGVIDNVGGDALTPVATAVSTSVQSNTLPKDAPTVREVGEGDGKDSSSDSSLSSSDSSSFFGESFNFRVHAQRSEIPTESALIFETKGRANTHENQVHNGGVAVTQNLSSCDPDICSGRELLNHGKNIAGGSGARERSTSTISTSQLSEHKDDVFRLPHTFSVDASVENSTKTGEVLVSAAQMFGARVLDERMGSVDSRLRIYDPKPQKVIRHVFRLPSCQGSGTPAESQLYWKERHYAAASITCSYCLIMPTEGRLASISDDGSCISDCGGVPSARDSNLTSMTPTTACALVSGALVTDFRWIVESVAARCLLPALQYSKRPSWSRHESVSTCGGSGASVDNQTPGRWAAEGHAFMLLPDSVLQLLLQQQTSGSISMRGSSRELSATVTGGYDFCSWRRLILLSGGVLLRFPEECVRQLLLDAMSMSYNDVMIGRNGCDHDERVTAVQNAMHMANGAGRSVFNVECCPERCTASTFLIRNVIILRDSVSTGKDAPCSGSQLLFKRRLERILQSFSVLLSLVQSREVTPVRDVSPSQVFVGSKPFVTFGDVTERYSAPHVMLRSTKWLLRTFSGRLQDSSCESCVGSDQ"
sequence1 = Sequence(sequence_fus, kmer_max_length=2)
sequence2 = Sequence(sequence_esb, kmer_max_length=2)
sequence1.kmer_outlier_stats() # which kmers are dissimilar from uniform abundance distribution?
sequence2.kmer_outlier_stats()
difference = sequence1.sequence_difference(sequence2)

from afkost import KmerMatrix
matrix = KmerMatrix(kmer_max_length=2)
from afkost import TriTrypDB
tritrypdb = TriTrypDB(version="65")
tritrypdb.fetch_fasta("TbruceiTREU927")
matrix1 = matrix.composition_from_fasta("_tritrypdb/TbruceiTREU927.65.fasta")
sequence1.composition_dissimilarity_stats() # dissimilarity from composition unity (matrix.composition_unity)
sequence1.composition_dissimilarity_stats(matrix1) # dissimilarity from average T brucei
sequence1.kmer_outlier_stats(matrix1) # outlier stats per kmer from average T brucei

# searchy/database things
from afkost import Search
search = Search() #Default is sequence_type = "protein" and kmer_max_length = 3
search.index_fasta_file("_tritrypdb/TbruceiTREU927.65.fasta")
